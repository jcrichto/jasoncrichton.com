---
// import Icon from './Icon.astro';
import { Icon } from "astro-icon";

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
  { label: "Home", href: "/" },
  { label: "Work", href: "/work/" },
  { label: "About", href: "/about/" },
  { label: "Contact", href: "/contact/" },
];
---

<nav id="mainnav">
  <div class="container" data-type="wide">
    <div class="menu-header">
      <a href="/" class="site-title fw-bold">
        <svg viewBox="0 0 208 176" fill="currentColor"
          ><path
            d="M104 88a8 8 0 0 1-3 6.25l-40 32c-3.45 2.76-8.49 2.2-11.25-1.25s-2.2-8.49 1.25-11.25L83.19 88 51 62.25c-3.45-2.76-4.01-7.8-1.25-11.25s7.8-4.01 11.25-1.25l40 32a8 8 0 0 1 3 6.25Zm104-72v144c0 8.84-7.16 16-16 16H16c-8.84 0-16-7.16-16-16V16C0 7.16 7.16 0 16 0h176c8.84 0 16 7.16 16 16Zm-16 144V16H16v144h176Z"
          ></path><path
            class="term-cursor"
            d="M112 112c-4.42 0-8 3.58-8 8s3.58 8 8 8h40c4.42 0 8-3.58 8-8s-3.58-8-8-8"
          ></path></svg
        >
        <span>Jason <br />Crichton</span>
      </a>
      <menu-button>
        <template>
          <button class="menu-button" aria-expanded="false">
            <span class="sr-only">Menu</span>
            <Icon name="ph:list-light" width="1em" />
          </button>
        </template>
      </menu-button>
    </div>
    <div id="menu-content">
      <ul class="nav-items">
        {
          textLinks.map(({ label, href }) => (
            <li>
              <a
                aria-current={Astro.url.pathname === href}
                class:list={[
                  "link",
                  {
                    "active":
                      Astro.url.pathname === href ||
                      (href !== "/" && Astro.url.pathname.startsWith(href)),
                  },
                ]}
                href={href}
              >
                {label}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</nav>

<script>
  class MenuButton extends HTMLElement {
    constructor() {
      super();

      // Inject menu toggle button when JS runs.
      this.appendChild(this.querySelector("template")!.content.cloneNode(true));
      const btn = this.querySelector("button")!;

      const mainnav = document.getElementById("mainnav")!;

      // create overlay div
      const overlayDiv = document.createElement("div");
      overlayDiv.className = "overlay";
      document.body.appendChild(overlayDiv);

      // Hide menu (shown by default to support no-JS browsers).
      const menu = document.getElementById("menu-content")!;
      menu.hidden = true;
      overlayDiv.hidden = true;

      /** Set whether the menu is currently expanded or collapsed. */
      const setExpanded = (expand: boolean) => {
        btn.setAttribute("aria-expanded", expand ? "true" : "false");
        setStyles(expand);
        menu.hidden = !expand;
        overlayDiv.hidden = !expand;
      };

      const setStyles = (expand: boolean) => {
        mainnav.classList.toggle("mobile", expand);
        overlayDiv.classList.toggle("open", expand);
      };

      // Toggle menu visibility when the menu button is clicked.
      btn.addEventListener("click", () => setExpanded(menu.hidden));

      // Hide menu button for large screens.
      const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
        setStyles(false);
        btn.hidden = e.matches;
      };
      const mediaQueries = window.matchMedia("(min-width: 50em)");
      handleViewports(mediaQueries);
      mediaQueries.addEventListener("change", handleViewports);

      // Check if the clicked element is outside the menu
      document.addEventListener("click", function (event) {
        var target = event.target;

        if (!mainnav.contains(target) && !menu.hidden) {
          // Close the menu
          // Add your code here to close the menu
          setExpanded(menu.hidden);
        }
      });
    }
  }
  customElements.define("menu-button", MenuButton);
</script>

<style is:global>
  .overlay.open {
    content: "";
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.2); /* Adjust the opacity as needed */
    z-index: 100; /* Ensure the overlay is above other elements */
    backdrop-filter: blur(6px);
    -webkit-backdrop-filter: blur(6px);
  }
</style>

<style>
  nav {
    z-index: 9999;
    position: absolute;
    font-family: var(--font-accent);
    width: 100%;
  }

  nav.mobile {
    background-color: #fff;
    touch-action: manipulation;
  }

  nav.mobile .site-title {
    color: #000 !important;
  }

  .menu-header {
    display: flex;
    justify-content: space-between;
    gap: 0.5rem;
    padding: 1rem 0;
  }

  .site-title {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    line-height: 1.1;
    color: var(--gray-0);
    text-decoration: none;
    font-family: var(--font-accent);
  }

  .site-title svg {
    width: 3rem;
  }

  body.home .site-title span {
    display: none;
  }

  body.nav-theme-light .site-title {
    color: #fff;
  }

  .menu-button {
    position: relative;
    display: flex;
    border: 0;
    border-radius: 999rem;
    padding: 0.5rem;
    font-size: 1.5rem;
    color: var(--gray-300);
    background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
    box-shadow: var(--shadow-md);
  }

  .menu-button[aria-expanded="true"] {
    color: var(--gray-0);
    background: linear-gradient(180deg, var(--gray-600), transparent),
      radial-gradient(var(--gray-900), var(--gray-800) 150%);
    touch-action: manipulation;
  }

  .menu-button button {
    touch-action: manipulation;
  }

  .menu-button[hidden] {
    display: none;
  }

  .menu-button::before {
    position: absolute;
    inset: -1px;
    content: "";
    background: var(--gradient-stroke);
    border-radius: 999rem;
    z-index: -1;
  }

  #menu-content {
    position: absolute;
    left: 0;
    right: 0;
  }



  .nav-items {
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    font-size: var(--text-md);
    line-height: 1.2;
    list-style: none;
    padding: 2rem;
    background-color: var(--gray-999);
    border-bottom: 1px solid var(--gray-800);
    text-align: center;
  }



  .link {
    display: inline-block;
    color: var(--gray-300);
    text-decoration: none;
    font-size: var(--fs-600);
	font-weight: var(--fw-light);
  }

  .active.gradient-bg {
	background: none;
  }

  .menu-footer {
    /* --icon-size: var(--text-xl); */
    --icon-padding: 0.5rem;

    display: flex;
    justify-content: space-between;
    gap: 0.75rem;
    padding: 1.5rem 2rem 1.5rem 1.5rem;
    /* box-shadow: var(--shadow-lg); */
  }




  @media (min-width: 50em) {
    nav .container {
      display: grid;
      grid-template-columns: 1fr auto 0;
      align-items: center;
      padding: 2.5rem 0;
      gap: 1rem;
    }

    .menu-header {
      padding: 0;
    }

    .site-title {
      font-size: 1.5rem;
    }

    .site-title svg {
      width: 4rem;
    }

    #menu-content {
      display: contents;
    }

    .nav-items {
      position: relative;
      flex-direction: row;
      font-size: var(--fs-300);
      border-radius: 999rem;
      border: 0;
      padding: 0.5rem 0.5625rem;
      background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
      box-shadow: var(--shadow-md);
    }

    .nav-items::before {
      position: absolute;
      inset: -1px;
      content: "";
      background: var(--gradient-stroke);
      border-radius: 999rem;
      z-index: -1;
    }

    .link {
      padding: 0.5rem 1rem;
      border-radius: 999rem;
      transition: color var(--theme-transition),
        background-color var(--theme-transition);
      font-size: var(--fs-300);
    }

    .link:hover,
    .link:focus {
      color: var(--gray-100);
      background-color: var(--accent-subtle-overlay);
    }

    .link.active {
      color: var(--accent-text-over);
	  background: var(--gradient-bg);
	  background-size: 800% 150%;
	  animation: gradient 35s ease infinite;
    }

    .menu-footer {
      --icon-padding: 0.375rem;

      justify-self: flex-end;
      align-items: center;
      padding: 0;
      background-color: transparent;
      box-shadow: none;
    }
  }

  @media (forced-colors: active) {
    .link.active {
      color: SelectedItem;
    }
  }

  .term-cursor {
    animation: cursor-blink 0.8s infinite;
  }

  @keyframes cursor-blink {
    0% {
      opacity: 0;
    }
    50% {
      opacity: 1;
    }
    100% {
      opacity: 0;
    }
  }
</style>
